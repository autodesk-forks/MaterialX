#ifndef MATERIALX_GLSLVALIDATOR_H
#define MATERIALX_GLSLVALIDATOR_H

#include <MaterialXShaderGen/HwShader.h>
#include <vector>
#include <string>

namespace MaterialX
{

/// @class GLSLValidator
/// Helper class to perform validation of GLSL source code generated by the GLSL code generator.
///
/// There are two main interfaces whic can be used. One which taks in a HwShader and one which
/// allow for explicit setting of shader stage code.
///
/// The main services provided are validation and rendering
/// Validation involves compiling all shader stages and attaching it to a shader program
/// Rendering tests bind the shader to produce an output image. Rendered image can be 
/// saved to disk.
///
class GLSLValidator
{
  public:
    /// Shader stage enums
    enum class Stage
    {
        VERTEX,
        GEOMETRY,
        TESSELLATION,
        PIXEL,
        STAGE_COUNT = PIXEL
    };

    GLSLValidator();
    virtual ~GLSLValidator();

    /// Set up code to validate using a shader
    /// @param shader Hardware shader to use
    void setup(const HwShader& shader);

    /// Setup code to validate one stage at a time. 
    /// @param code Shader code string for a given stage
    /// @param stage Shader stage
    void setup(const std::string& code, const Stage& stage)
    {
        _stages[(unsigned int)stage] = code;
    }

    /// Create the shader program from stages specified
    /// @param errors List of errors which may result if validation valids
    /// @return Program identifier. Will be non-zero on success 
    unsigned int createProgram(std::vector<std::string>& errors);

    /// Render to buffer
    /// @errors List of errors if rendering fails
    /// @return true if successful
    bool render(std::vector<std::string>& errors);

    /// Save buffer to disk
    /// @errors fileName Name of file to save rendered image to
    /// @return true if successful
    bool save(std::string& fileName);

  protected:
      void cleanup();
      bool haveValidStages() const;
  private:
    std::string _stages[Stage::STAGE_COUNT];
    unsigned int _programId;
};

} // namespace MaterialX
#endif
