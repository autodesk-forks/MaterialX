#ifndef MATERIALX_GLSLVALIDATOR_H
#define MATERIALX_GLSLVALIDATOR_H

#include <MaterialXShaderGen/HwShader.h>
#include <vector>
#include <string>

namespace MaterialX
{

/// @class GLSLValidator
/// Helper class to perform validation of GLSL source code generated by the GLSL code generator.
///
/// There are two main interfaces whic can be used. One which taks in a HwShader and one which
/// allow for explicit setting of shader stage code.
///
/// The main services provided are validation and rendering
/// Validation involves compiling all shader stages and attaching it to a shader program
/// Rendering tests bind the shader to produce an output image. Rendered image can be 
/// saved to disk.
///
class GLSLValidator
{
  public:
    using ErrorList = std::vector<std::string>;

    /// Constructor
    GLSLValidator();

    /// Destructor
    virtual ~GLSLValidator();

    bool iniitialized() const
    {
        return _initialized;
    }

    /// Set up code to validate using a shader
    /// @param shader Hardware shader to use
    void setStages(const HwShader& shader);

    /// Setup code to validate one stage at a time. 
    /// @param code Shader code string for a given stage
    /// @param stage Shader stage
    void setStage(const std::string& code, size_t stage)
    {
        _stages[stage] = code;
    }

    /// Clear out any existing stages
    void clearStages();

    /// Create the shader program from stages specified
    /// @param errors List of errors which may result if validation valids
    /// @return Program identifier. Will be non-zero on success 
    unsigned int createProgram(ErrorList& errors);

    /// Delete any currently created shader program
    void deleteProgram();

    /// Render to buffer
    /// @errors List of errors if rendering fails
    /// @return true if successful
    bool render(ErrorList& errors);

    /// Save buffer to disk
    /// @errors fileName Name of file to save rendered image to
    /// @return true if successful
    bool save(std::string& fileName);

  protected:
    /// Internal initialization of stages and OpenGL contstructs
    /// required for program validation and rendering.
    void initialize(ErrorList& errors);
      
    /// Internal cleanup of stages and OpenGL constructs
    void cleanup();

    /// Check if there is a valid set of stages to build program from
    bool haveValidStages() const;

    /// Create a offscreen target used for rendering.
    bool createTarget(ErrorList& errors);
    /// Delete any created offscreen target.
    void deleteTarget();
    /// Bind or unbind any created offscree target.
    bool bindTarget(bool bind, ErrorList& errors);


private:
    // Stages used to create program
    std::string _stages[HwShader::NUM_STAGES];
    
    // Generated program
    unsigned int _programId;

    // Buffer for rendering
    unsigned int _colorTarget;
    unsigned int _depthTarget;
    unsigned int _frameBuffer;
    unsigned int _frameBufferWidth;
    unsigned int _frameBufferHeight;

    bool _initialized;
};

} // namespace MaterialX
#endif
