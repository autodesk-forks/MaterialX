#ifndef MATERIALX_GLSLPROGRAM_H
#define MATERIALX_GLSLPROGRAM_H

#include <MaterialXShaderGen/HwShader.h>
#include <MaterialXView/ShaderValidators/ExceptionShaderValidationError.h>
//#include <MaterialXView/Image/ImageHandler.h>
//#include <MaterialXView/Window/SimpleWindow.h>
//#include <MaterialXView/OpenGL/GLUtilityContext.h>
#include <vector>
#include <string>
#include <unordered_map>

namespace MaterialX
{
// Shared pointer to a GlslProgram
using GlslProgramPtr = std::shared_ptr<class GlslProgram>;

/// @class @GlslProgram
/// Helper class to perform validation of GLSL source code generated by the GLSL code generator.
///
/// There are two main interfaces which can be used. One which takes in a HwShader and one which
/// allows for explicit setting of shader stage code.
///
/// The main services provided are:
///     - Validation: All shader stages are compiled and atteched to a GLSL shader program.
///     - Introspection: The compiled shader program is examined for uniforms and attributes.
///     - Binding: Uniforms and attributes which match the predefined variables generated the GLSL code generator
///       will have values assigned to this. This includes matrices, attribute streams, and textures.
///     - Rendering: The program with bound inputs will be used to drawing geometry to an offscreen buffer.
///     An interface is provided to save this offscreen buffer to disk using an externally defined image handler.
///
class GlslProgram
{
  public:
    /// Structure to hold information about program inputs
    /// The structure is populated by directly scanning the program so may not contain
    /// some inputs listed on any associated HwShader as those inputs may have been
    /// optimized out if they are unused.
    struct ProgramInput
    {
        static int INVALID_OPENGL_TYPE;

        /// Program location. -1 means an invalid location
        int location;
        /// OpenGL type of the input. -1 means an invalid type
        int gltype;
        /// Size.
        int size;
        /// Input type string. Will only be non-empty if initialized stages with a HwShader
        std::string typeString;
        /// Input value. Will only be non-empty if initialized stages with a HwShader and a value was set during
        /// shader generation.
        MaterialX::ValuePtr value;

        /// Program input constructor
        ProgramInput(int inputLocation, int inputType, int inputSize)
        : location(inputLocation)
        , gltype(inputType)
        , size(inputSize)
        {}
    };
    /// Program input structure shared pointer type
    using ProgramInputPtr = std::shared_ptr<ProgramInput>;
    /// Program input shaded pointer map type
    using ProgramInputMap = std::unordered_map<std::string, ProgramInputPtr>;

    /// Constructor
    GlslProgram();

    /// Destructor
    virtual ~GlslProgram();

    /// @name Setup
    /// @{

    /// Set up code stages to validate based on an input hardware shader.
    /// @param shader Hardware shader to use
    void setStages(const HwShaderPtr shader);

    /// This method can be used to incrementally set the code stages before validation.
    /// @param code Shader code string for a given stage
    /// @param stage Shader stage. See stages allowed in the class HwShader.
    void setStage(const std::string& code, size_t stage);

    /// Get code string for a given stage
    /// @return Shader stage string. String is empty if not found.
    const std::string getStage(size_t stage) const;

    /// Get the number of stages
    /// @return Stage count
    size_t numStages() const
    {
        return HwShader::NUM_STAGES;
    }

    /// Clear out any existing stages
    void clearStages();

    /// @}
    /// @name Program handling
    /// @{

    /// Create the shader program from stages specified
    /// An exception is thrown if the program cannot be created.
    /// The exception will contain a list of program creation errors.
    /// @return Program identifier. 
    unsigned int createProgram();

    /// Get list of program input uniforms. 
    /// The program must have been created successfully first.
    /// An exception is thrown if the parsing of the program for uniforms cannot be performed.
    /// @return Program uniforms list.
    const ProgramInputMap& getUniformsList();

    /// Get list of program input attributes. 
    /// The program must have been created successfully first.
    /// An exception is thrown if the parsing of the program for attribute cannot be performed.
    /// @return Program attributes list.
    const ProgramInputMap& getAttributesList();

    /// Delete any currently created shader program
    void deleteProgram();

    /// Utility to map a syntax type to an OpenGL type
    /// @param type Syntax type
    /// @return OpenGL type. INVALID_OPENGL_TYPE is returned if no mapping exists. For example strings have no OpenGL type.
    static int mapTypeToOpenGLType(const std::string& type);

    /// Find the locations in the program which starts with a given variable name
    /// @param variable Variable to search for
    /// @param variableList List of program inputs to search
    /// @param foundList Returned list of found program inputs. Empty if none found.
    /// @param exactMatch Search for exact variable name match.
    void findProgramInputs(const std::string& variable,
                            const ProgramInputMap& variableList,
                            ProgramInputMap& foundList,
                            bool exactMatch);

    /// Bind the program.
    /// @return False if failed
    bool bind() const;

    /// Return if there are any active inputs on the program
    bool haveActiveAttributes() const;

    /// Unbind the program. Equivalent to binding no program
    void unbind() const;

    /// @}

    /// Constant for an undefined OpenGL resource identifier
    static unsigned int UNDEFINED_OPENGL_RESOURCE_ID;
    /// Constant for a undefined OpenGL program location
    static int UNDEFINED_OPENGL_PROGRAM_LOCATION;

  protected:
    ///
    /// @name Program introspection
    /// @{

    /// Update a list of program input uniforms
    const ProgramInputMap& updateUniformsList();

    /// Update a list of program input attributes
    const ProgramInputMap& updateAttributesList();

    /// Clear out any cached input lists
    void clearInputLists();   

    /// @}
    /// @name Utilities
    /// @{

    /// Internal cleanup of stages and OpenGL constructs
    void cleanup();

    /// Check if there is a valid set of stages to build program from
    bool haveValidStages() const;

    /// Utility to check for OpenGL context errors.
    /// Will throw an ExceptionShaderValidationError exception which will list of the errors found
    /// if any errors encountered.
    void checkErrors();

    /// @}

  private:
    /// Stages used to create program
    std::string _stages[HwShader::NUM_STAGES];

    /// Generated program. A non-zero number indicates a valid shader program.
    unsigned int _programId;

    /// List of program input uniforms
    ProgramInputMap _uniformList;
    /// List of program input attributes
    ProgramInputMap _attributeList;

    /// Hardware shader (if any) used for program creation
    HwShaderPtr _hwShader;
};

} // namespace MaterialX
#endif
