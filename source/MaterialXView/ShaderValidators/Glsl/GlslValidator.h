#ifndef MATERIALX_GLSLVALIDATOR_H
#define MATERIALX_GLSLVALIDATOR_H

#include <MaterialXShaderGen/HwShader.h>
#include <MaterialXView/ImageHandler.h>
#include <vector>
#include <string>
#include <unordered_map>

namespace MaterialX
{

/// Error string list type
using ShaderValidationErrorList = std::vector<std::string>;

/// @class @GlslValidator
/// Helper class to perform validation of GLSL source code generated by the GLSL code generator.
///
/// There are two main interfaces which can be used. One which takes in a HwShader and one which
/// allows for explicit setting of shader stage code.
///
/// The main services provided are validation and rendering.
/// Validation involves compiling all shader stages and attaching it to a shader program.
/// Rendering involves binding the shader and drawing geometry to an offscreen buffer. 
///
class GlslValidator
{
  public:
    /// Structure to hold information about program inputs
    struct ProgramInput
    {
        /// Program location. -1 means an invalid location
        int _location;
        /// OpenGL type of the input. -1 means an invalid type
        int _type;

        /// Program input constructor
        ProgramInput(int inputLocation = -1, int inputType = -1)
        : _location(inputLocation)
        , _type(inputType)
        {}
    };
    /// Program input structure shared pointer type
    using ProgramInputPtr = std::shared_ptr<ProgramInput>;
    /// Program input structure list type
    using ProgramInputList = std::unordered_map<std::string, ProgramInputPtr>;

    /// Constructor
    GlslValidator();

    /// Destructor
    virtual ~GlslValidator();

    /// Internal initialization of stages and OpenGL contstructs
    /// required for program validation and rendering.
    /// An exception is thrown on failure.
    /// The exception will contain a list of initialization errors.
    void initialize();

    /// Return whether the validator has been initialized properly.
    /// It is possible due to platform ahd machine restrictions that this
    /// may fail.
    bool iniitialized() const
    {
        return _initialized;
    }

    /// Set up code stages to validate based on an input hardware shader.
    /// @param shader Hardware shader to use
    void setStages(const HwShaderPtr shader);

    /// This method can be used to incrementally set the code stages before validation.
    /// @param code Shader code string for a given stage
    /// @param stage Shader stage. See stages allowed in the class HwShader.
    void setStage(const std::string& code, size_t stage);

    /// Get code string for a given stage
    /// @return Shader stage string. String is empty if not found.
    const std::string getStage(size_t stage) const;

    /// Get the number of stages
    /// @return Stage count
    size_t numberofStages() const
    {
        return HwShader::NUM_STAGES;
    }

    /// Clear out any existing stages
    void clearStages();

    /// Create the shader program from stages specified
    /// An exception is thrown if the program cannot be created.
    /// The exception will contain a list of program creation errors.
    /// @return Program identifier. 
    unsigned int createProgram();

    /// Get list of program input uniforms. 
    /// The program must have been created successfully first.
    /// An exception is thrown if the parsing of the program for uniforms cannot be performed.
    /// @return Program uniforms list.
    const ProgramInputList& getUniformsList();

    /// Get list of program input attributes. 
    /// The program must have been created successfully first.
    /// An exception is thrown if the parsing of the program for attribute cannot be performed.
    /// @return Program attributes list.
    const ProgramInputList& getAttributesList();

    /// Delete any currently created shader program
    void deleteProgram();

    /// Render to buffer
    void render();

    /// Save buffer to disk
    /// @param fileName Name of file to save rendered image to.
    /// @param imageHandler Handler used to save image
    /// @return true if successful
    void save(std::string& fileName, const ImageHandlerPtr imageHandler);

  protected:
    /// Internal cleanup of stages and OpenGL constructs
    void cleanup();

    /// Check if there is a valid set of stages to build program from
    bool haveValidStages() const;

    /// Create a offscreen target used for rendering.
    bool createTarget();
    /// Delete any created offscreen target.
    void deleteTarget();
    /// Bind or unbind any created offscree target.
    bool bindTarget(bool bind);

    /// Utility to check for OpenGL context errors.
    /// Will throw an ExceptionShaderValidationError exception which will list of the errors found
    /// if any errors encountered.
    void checkErrors();

    /// Bind inputs
    void bindInputs();

    /// Bind input matrices
    void bindMatrices();

    /// Bind input geometry streams
    void bindGeometry();
    
    /// Unbind any bound geometry
    void unbindGeometry();

    /// Bind any input textures
    void bindTextures();

    /// Unbind input textures
    void unbindTextures();

    /// Update a list of program input uniforms
    const ProgramInputList& updateUniformsList();

    /// Update a list of program input attributes
    const ProgramInputList& updateAttributesList();

    /// Clear out any cached input lists
    void clearInputLists();

    /// Index used to access cached attribute locations and buffers
    enum AttributeIndex {
        POSITION_ATTRIBUTE = 0, /// Position attribute index
        NORMAL_ATTRIBUTE,       /// Normal attribute index
        TANGENT_ATTRIBUTE,      /// Tangent attribute index
        BITANGENT_ATTRIBUTE,    /// Bitangent attribute index
        COLOR_ATTRIBUTE,        /// Color attribute index
        ATTRIBUTE_COUNT         /// Number of attribute indices
    };
    /// Update attribute locatoins and buffers by scanning for a given attribute identifier
    /// If the identifier is found then cache the location and create a hardware buffer.
    /// Currently all data create is of type float.
    /// using a data buffer passed in.
    /// @param bufferData Block of data to put into the buffer
    /// @param bufferSize Size of data block
    /// @param attributeId Identifier of program attribute to search for
    /// @param attributeIndex Indicator for type of buffer to create
    /// @param floatCount Number of float channels in the buffer
    bool updateAttribute(const float *bufferData, size_t bufferSize,
        const std::string& attributeId,
        const GlslValidator::AttributeIndex attributeIndex,
        unsigned int floatCount);

    /// Dummy texture for testing with
    void createDummyTexture(bool colored);

  private:
    /// Stages used to create program
    std::string _stages[HwShader::NUM_STAGES];

    /// Generated program. A non-zero number indicates a valid shader program.
    unsigned int _programId;

    /// Hardware color target (texture)
    unsigned int _colorTarget;

    /// Hardware depth target (texture)
    unsigned int _depthTarget;

    /// Hardware frame buffer object
    unsigned int _frameBuffer;

    /// Width of the frame buffer / targets to use. 
    unsigned int _frameBufferWidth;
    /// Height of the frame buffer / targets to use. 
    unsigned int _frameBufferHeight;

    /// Attribute program locations
    std::vector<int> _attributeLocations;

    /// Attribute buffer resource handls
    std::vector<unsigned int> _attributeBuffers;

    /// Attribute program locations for texture coordinates
    /// As there can be multiple locations which use the same buffer 
    /// A separate locations list and buffer is used.
    std::vector<int> _uvLocations;
    /// Texture coordinate buffer handle
    unsigned int _uvBuffer;
    
    /// Attribute indexing buffer handle
    unsigned int _indexBuffer;
    /// Size of index buffer
    unsigned int _indexBufferSize;
    
    /// Attribute vertex array handle
    unsigned int _vertexArray;

    /// List of program input uniforms
    ProgramInputList _uniformList;
    /// List of program input attributes
    ProgramInputList _attributeList;

    /// Dummy texture
    unsigned int _dummyTexture;

    /// Hardware shader (if any) used for program creation
    HwShaderPtr _hwShader;

    /// Flag to indicate if validator has been initialized properly.
    bool _initialized;
};

/// @class @ExceptionShaderValidationError
/// An exception that is thrown when shader validation fails.
/// An error log of shader errors is cached as part of the exception.
/// For example, if shader compilation fails, then a list of compilation errors is cached.
class ExceptionShaderValidationError : public Exception
{
public:
    ExceptionShaderValidationError(const string& msg, const ShaderValidationErrorList& errorList) :
        Exception(msg),
        _errorLog(errorList)
    {
    }

    ExceptionShaderValidationError(const ExceptionShaderValidationError& e) :
        Exception(e)
    {
        _errorLog = e._errorLog;
    }

    ExceptionShaderValidationError& operator=(const ExceptionShaderValidationError& e)         
    {
        Exception::operator=(e);
        _errorLog = e._errorLog;
        return *this;
    }

    virtual ~ExceptionShaderValidationError() throw()
    {
    }

    ShaderValidationErrorList _errorLog;
};

} // namespace MaterialX
#endif
