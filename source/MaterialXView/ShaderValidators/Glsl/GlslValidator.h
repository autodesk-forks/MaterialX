#ifndef MATERIALX_GLSLVALIDATOR_H
#define MATERIALX_GLSLVALIDATOR_H

#include <MaterialXShaderGen/HwShader.h>
#include <MaterialXView/ShaderValidators/ExceptionShaderValidationError.h>
#include <MaterialXView/Handlers/ImageHandler.h>
#include <MaterialXView/Window/SimpleWindow.h>
#include <MaterialXView/OpenGL/GLUtilityContext.h>
#include <MaterialXView/ShaderValidators/Glsl/GlslProgram.h>
#include <MaterialXView/Handlers/GeometryHandler.h>
#include <MaterialXView/Handlers/LightHandler.h>
#include <vector>
#include <string>
#include <unordered_map>

namespace MaterialX
{
// Shared pointer to a GlslProgram
using GlslValidatorPtr = std::shared_ptr<class GlslValidator>;

/// @class @GlslValidator
/// Helper class to perform validation of GLSL source code generated by the GLSL code generator.
///
/// There are two main interfaces which can be used. One which takes in a HwShader and one which
/// allows for explicit setting of shader stage code.
///
/// The main services provided are:
///     - Validation: All shader stages are compiled and atteched to a GLSL shader program.
///     - Introspection: The compiled shader program is examined for uniforms and attributes.
///     - Binding: Uniforms and attributes which match the predefined variables generated the GLSL code generator
///       will have values assigned to this. This includes matrices, attribute streams, and textures.
///     - Rendering: The program with bound inputs will be used to drawing geometry to an offscreen buffer.
///     An interface is provided to save this offscreen buffer to disk using an externally defined image handler.
///
class GlslValidator
{
  public:
    /// Create a GLSL validator instance
    static GlslValidatorPtr creator();

    /// Destructor
    virtual ~GlslValidator();

    /// @name Setup
    /// @{

    /// Internal initialization of stages and OpenGL contstructs
    /// required for program validation and rendering.
    /// An exception is thrown on failure.
    /// The exception will contain a list of initialization errors.
    void initialize();

    /// Set image handler to use for image load and save
    /// @param imageHandler Handler used to save image
    void setImageHandler(const ImageHandlerPtr imageHandler)
    {
        _imageHandler = imageHandler;
    }

    /// Set light handler to use for light bindings
    /// @param imageHandler Handler used for lights
    void setLightHandler(const LightHandlerPtr lightHandler)
    {
        _lightHandler = lightHandler;
    }

    /// @}
    /// @name Validation
    /// @{

    /// Validate creation of program based on an input shader
    /// @param shader Input HwShader
    void validateCreation(const HwShaderPtr shader);

    /// Validate creation of program based input shader stage strings
    /// @param shader Input stages List of stage string
    void validateCreation(const std::vector<std::string>& stages);

    /// Validate inputs for the program 
    void validateInputs();

    /// Perform validation that inputs can be bound to and 
    /// rendered with. Rendering is to an offscreen hardware buffer.
    void validateRender();

    /// @}
    /// @name Utilities
    /// @{

    /// Save the current contents the offscreen hardware buffer to disk.
    /// @param fileName Name of file to save rendered image to.
    /// @return true if successful
    void save(const std::string& fileName);
    
    /// Return the GLSL program wrapper class
    MaterialX::GlslProgramPtr program()
    {
        return _program;
    }

    /// @}

  protected:
    /// Constructor
    GlslValidator();

    /// Internal cleanup of stages and OpenGL constructs
    void cleanup();

    /// @name Target handling
    /// @{

    /// Create a offscreen target used for rendering.
    bool createTarget();
    /// Delete any created offscreen target.
    void deleteTarget();
    /// Bind or unbind any created offscree target.
    bool bindTarget(bool bind);

    /// Index used to access cached attribute buffers
    enum AttributeIndex {
        POSITION3_ATTRIBUTE = 0,/// 3 float position attribute 
        NORMAL3_ATTRIBUTE,      /// 3 float normal attribute 
        TANGENT3_ATTRIBUTE,     /// 3 float tangent attribute
        BITANGENT3_ATTRIBUTE,   /// 3 float bitangent attribute 
        TEXCOORD2_ATTRIBUTE,    /// 2 float texture coordinate attribute
        COLOR4_ATTRIBUTE,       /// 4 float color attribute 
        ATTRIBUTE_COUNT         /// Number of attribute types
    };

    /// Bind attribute buffers by scanning for a given attribute identifier.
    /// If either an exact match for the identifier, or the identifier is a prefix of an attribute name then 
    /// a hardware buffer of the given attribute type is created and bound to the program location
    /// for the attribute.
    /// @param bufferData Block of buffer data 
    /// @param bufferSize Size of buffer data.
    /// @param attributeId Identifier of program attribute to search for
    /// @param attributeIndex Indicator for type of buffer to create
    /// @param floatCount Number of floats per channel in the buffer
    /// @param exactMatch Check for exact identifier matches
    bool bindAttribute(const float *bufferData, size_t bufferSize,
                       const std::string& attributeId,
                       const GlslValidator::AttributeIndex attributeIndex,
                       unsigned int floatCount,
                       bool exactMatch);

    /// @}
    /// @name Program bindings
    /// @{

    /// Bind inputs
    void bindInputs();

    /// Bind viewing information
    void bindViewInformation();

    /// Bind input geometry streams
    void bindGeometry();

    /// Unbind any bound geometry
    void unbindGeometry();

    /// Bind any input textures
    void bindTextures();

    /// Unbind input textures
    void unbindTextures();

    /// Bind time and frame uniforms
    void bindTimeAndFrame();

    /// Bind lighting
    void bindLighting();

  private:
    /// Dummy texture for testing with
    void createDummyTexture(bool colored);

    /// Utility to check for OpenGL context errors.
    /// Will throw an ExceptionShaderValidationError exception which will list of the errors found
    /// if any errors encountered.
    void checkErrors();
    
    /// Assign a parameter value to a uniform
    void setUniform(int location, const Value& value);

    /// GLSL program. 
    GlslProgramPtr _program;

    /// Hardware color target (texture)
    unsigned int _colorTarget;

    /// Hardware depth target (texture)
    unsigned int _depthTarget;

    /// Hardware frame buffer object
    unsigned int _frameBuffer;

    /// Width of the frame buffer / targets to use. 
    unsigned int _frameBufferWidth;
    /// Height of the frame buffer / targets to use. 
    unsigned int _frameBufferHeight;

    /// Attribute buffer resource handles
    std::vector<unsigned int> _attributeBufferIds;
    
    /// Attribute indexing buffer handle
    unsigned int _indexBuffer;
    /// Size of index buffer
    unsigned int _indexBufferSize;
    
    /// Attribute vertex array handle
    unsigned int _vertexArray;

    /// Dummy texture
    unsigned int _dummyTexture;

    /// Flag to indicate if validator has been initialized properly.
    bool _initialized;
    
    /// Dummy window for OpenGL usage.
    SimpleWindowPtr _window;
    /// Dummy OpenGL context for OpenGL usage
    GLUtilityContextPtr _context;

    /// Utility image handler
    ImageHandlerPtr _imageHandler;
    std::vector<unsigned int> _programTextures;

    // Utility geometry handler
    GeometryHandlerPtr _geometryHandler;

    // Utility light handler
    LightHandlerPtr _lightHandler;
};

} // namespace MaterialX
#endif
